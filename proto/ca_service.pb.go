// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ca_service.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	ca_service.proto

It has these top-level messages:
	CertificateSignRequest
	NodeAgentCredentials
	GcpInstanceCredential
	OnPremNodeCredential
	CertificateSignResponse
	Error
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type CertificateSignRequest struct {
	Csr                  []byte                `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	NodeAgentCredentials *NodeAgentCredentials `protobuf:"bytes,2,opt,name=nodeAgentCredentials" json:"nodeAgentCredentials,omitempty"`
}

func (m *CertificateSignRequest) Reset()                    { *m = CertificateSignRequest{} }
func (m *CertificateSignRequest) String() string            { return proto1.CompactTextString(m) }
func (*CertificateSignRequest) ProtoMessage()               {}
func (*CertificateSignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CertificateSignRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

func (m *CertificateSignRequest) GetNodeAgentCredentials() *NodeAgentCredentials {
	if m != nil {
		return m.NodeAgentCredentials
	}
	return nil
}

type NodeAgentCredentials struct {
	// Types that are valid to be assigned to NodeCredential:
	//	*NodeAgentCredentials_GcpInstanceCredential
	//	*NodeAgentCredentials_OnPremNodeCredential
	NodeCredential isNodeAgentCredentials_NodeCredential `protobuf_oneof:"node_credential"`
}

func (m *NodeAgentCredentials) Reset()                    { *m = NodeAgentCredentials{} }
func (m *NodeAgentCredentials) String() string            { return proto1.CompactTextString(m) }
func (*NodeAgentCredentials) ProtoMessage()               {}
func (*NodeAgentCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isNodeAgentCredentials_NodeCredential interface {
	isNodeAgentCredentials_NodeCredential()
}

type NodeAgentCredentials_GcpInstanceCredential struct {
	GcpInstanceCredential *GcpInstanceCredential `protobuf:"bytes,1,opt,name=gcp_instance_credential,json=gcpInstanceCredential,oneof"`
}
type NodeAgentCredentials_OnPremNodeCredential struct {
	OnPremNodeCredential *OnPremNodeCredential `protobuf:"bytes,2,opt,name=on_prem_node_credential,json=onPremNodeCredential,oneof"`
}

func (*NodeAgentCredentials_GcpInstanceCredential) isNodeAgentCredentials_NodeCredential() {}
func (*NodeAgentCredentials_OnPremNodeCredential) isNodeAgentCredentials_NodeCredential()  {}

func (m *NodeAgentCredentials) GetNodeCredential() isNodeAgentCredentials_NodeCredential {
	if m != nil {
		return m.NodeCredential
	}
	return nil
}

func (m *NodeAgentCredentials) GetGcpInstanceCredential() *GcpInstanceCredential {
	if x, ok := m.GetNodeCredential().(*NodeAgentCredentials_GcpInstanceCredential); ok {
		return x.GcpInstanceCredential
	}
	return nil
}

func (m *NodeAgentCredentials) GetOnPremNodeCredential() *OnPremNodeCredential {
	if x, ok := m.GetNodeCredential().(*NodeAgentCredentials_OnPremNodeCredential); ok {
		return x.OnPremNodeCredential
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NodeAgentCredentials) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _NodeAgentCredentials_OneofMarshaler, _NodeAgentCredentials_OneofUnmarshaler, _NodeAgentCredentials_OneofSizer, []interface{}{
		(*NodeAgentCredentials_GcpInstanceCredential)(nil),
		(*NodeAgentCredentials_OnPremNodeCredential)(nil),
	}
}

func _NodeAgentCredentials_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*NodeAgentCredentials)
	// node_credential
	switch x := m.NodeCredential.(type) {
	case *NodeAgentCredentials_GcpInstanceCredential:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.GcpInstanceCredential); err != nil {
			return err
		}
	case *NodeAgentCredentials_OnPremNodeCredential:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.OnPremNodeCredential); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NodeAgentCredentials.NodeCredential has unexpected type %T", x)
	}
	return nil
}

func _NodeAgentCredentials_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*NodeAgentCredentials)
	switch tag {
	case 1: // node_credential.gcp_instance_credential
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(GcpInstanceCredential)
		err := b.DecodeMessage(msg)
		m.NodeCredential = &NodeAgentCredentials_GcpInstanceCredential{msg}
		return true, err
	case 2: // node_credential.on_prem_node_credential
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(OnPremNodeCredential)
		err := b.DecodeMessage(msg)
		m.NodeCredential = &NodeAgentCredentials_OnPremNodeCredential{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NodeAgentCredentials_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*NodeAgentCredentials)
	// node_credential
	switch x := m.NodeCredential.(type) {
	case *NodeAgentCredentials_GcpInstanceCredential:
		s := proto1.Size(x.GcpInstanceCredential)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NodeAgentCredentials_OnPremNodeCredential:
		s := proto1.Size(x.OnPremNodeCredential)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GcpInstanceCredential struct {
	SignedInstanceMetadata []byte `protobuf:"bytes,1,opt,name=signed_instance_metadata,json=signedInstanceMetadata,proto3" json:"signed_instance_metadata,omitempty"`
}

func (m *GcpInstanceCredential) Reset()                    { *m = GcpInstanceCredential{} }
func (m *GcpInstanceCredential) String() string            { return proto1.CompactTextString(m) }
func (*GcpInstanceCredential) ProtoMessage()               {}
func (*GcpInstanceCredential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GcpInstanceCredential) GetSignedInstanceMetadata() []byte {
	if m != nil {
		return m.SignedInstanceMetadata
	}
	return nil
}

type OnPremNodeCredential struct {
	NodeIdentityCert []byte `protobuf:"bytes,1,opt,name=node_identity_cert,json=nodeIdentityCert,proto3" json:"node_identity_cert,omitempty"`
	CertChain        []byte `protobuf:"bytes,2,opt,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
}

func (m *OnPremNodeCredential) Reset()                    { *m = OnPremNodeCredential{} }
func (m *OnPremNodeCredential) String() string            { return proto1.CompactTextString(m) }
func (*OnPremNodeCredential) ProtoMessage()               {}
func (*OnPremNodeCredential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OnPremNodeCredential) GetNodeIdentityCert() []byte {
	if m != nil {
		return m.NodeIdentityCert
	}
	return nil
}

func (m *OnPremNodeCredential) GetCertChain() []byte {
	if m != nil {
		return m.CertChain
	}
	return nil
}

type CertificateSignResponse struct {
	IsApproved bool   `protobuf:"varint,1,opt,name=is_approved,json=isApproved" json:"is_approved,omitempty"`
	Error      *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	SignedCert []byte `protobuf:"bytes,3,opt,name=signed_cert,json=signedCert,proto3" json:"signed_cert,omitempty"`
}

func (m *CertificateSignResponse) Reset()                    { *m = CertificateSignResponse{} }
func (m *CertificateSignResponse) String() string            { return proto1.CompactTextString(m) }
func (*CertificateSignResponse) ProtoMessage()               {}
func (*CertificateSignResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CertificateSignResponse) GetIsApproved() bool {
	if m != nil {
		return m.IsApproved
	}
	return false
}

func (m *CertificateSignResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CertificateSignResponse) GetSignedCert() []byte {
	if m != nil {
		return m.SignedCert
	}
	return nil
}

type Error struct {
	Code   int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto1.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto1.RegisterType((*CertificateSignRequest)(nil), "proto.CertificateSignRequest")
	proto1.RegisterType((*NodeAgentCredentials)(nil), "proto.NodeAgentCredentials")
	proto1.RegisterType((*GcpInstanceCredential)(nil), "proto.GcpInstanceCredential")
	proto1.RegisterType((*OnPremNodeCredential)(nil), "proto.OnPremNodeCredential")
	proto1.RegisterType((*CertificateSignResponse)(nil), "proto.CertificateSignResponse")
	proto1.RegisterType((*Error)(nil), "proto.Error")
}

func init() { proto1.RegisterFile("ca_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x65, 0x69, 0xb7, 0xa2, 0x93, 0x48, 0x84, 0xd1, 0xe6, 0x43, 0x40, 0xa1, 0xda, 0x53, 0x0f,
	0xa8, 0x87, 0xf4, 0xc2, 0x35, 0xac, 0x2a, 0xc8, 0x01, 0x0a, 0x2e, 0xe2, 0x88, 0x65, 0xbc, 0xc3,
	0x62, 0xa9, 0xb1, 0x17, 0xdb, 0xad, 0x84, 0x38, 0xf0, 0x33, 0xf9, 0x3b, 0xc8, 0x5e, 0x43, 0x08,
	0xb8, 0xa7, 0x38, 0xef, 0x79, 0xde, 0x87, 0x77, 0x60, 0x22, 0x05, 0x77, 0x64, 0x6f, 0x94, 0xa4,
	0xd3, 0xde, 0x1a, 0x6f, 0xb0, 0x8c, 0x3f, 0xf5, 0x77, 0x98, 0x35, 0x64, 0xbd, 0xfa, 0xac, 0xa4,
	0xf0, 0x74, 0xa9, 0x3a, 0xcd, 0xe8, 0xeb, 0x35, 0x39, 0x8f, 0x13, 0xd8, 0x93, 0xce, 0x2e, 0x8a,
	0xe3, 0xe2, 0x64, 0xcc, 0xc2, 0x11, 0x2f, 0xa0, 0xd2, 0xa6, 0xa5, 0x55, 0x47, 0xda, 0x37, 0x96,
	0x5a, 0xd2, 0x5e, 0x89, 0x2b, 0xb7, 0xb8, 0x7b, 0x5c, 0x9c, 0x8c, 0x96, 0x8f, 0x06, 0xe1, 0xd3,
	0x37, 0x99, 0x2b, 0x2c, 0x3b, 0x58, 0xff, 0x2c, 0xa0, 0xca, 0x5d, 0xc7, 0x0f, 0x30, 0xef, 0x64,
	0xcf, 0x95, 0x76, 0x5e, 0x68, 0x49, 0x5c, 0xfe, 0xe1, 0x62, 0x9e, 0xd1, 0xf2, 0x71, 0x32, 0x7b,
	0x29, 0xfb, 0x75, 0xba, 0xb4, 0x9d, 0x7f, 0x75, 0x87, 0x4d, 0xbb, 0x1c, 0x81, 0xef, 0x61, 0x6e,
	0x34, 0xef, 0x2d, 0x6d, 0x78, 0x08, 0xf4, 0xb7, 0xee, 0x6e, 0x89, 0x0b, 0xfd, 0xd6, 0xd2, 0x26,
	0x64, 0xdb, 0x91, 0xad, 0x4c, 0x06, 0x7f, 0xf1, 0x00, 0xee, 0xff, 0xa3, 0x56, 0xbf, 0x83, 0x69,
	0x36, 0x1a, 0x3e, 0x87, 0x85, 0x53, 0x9d, 0xa6, 0x76, 0x5b, 0x6e, 0x43, 0x5e, 0xb4, 0xc2, 0x8b,
	0xf4, 0xd4, 0xb3, 0x81, 0xff, 0x3d, 0xfb, 0x3a, 0xb1, 0xb5, 0x84, 0x2a, 0x97, 0x0a, 0x9f, 0x01,
	0x46, 0x77, 0x15, 0x01, 0xff, 0x8d, 0x4b, 0xb2, 0x3e, 0x69, 0x4d, 0x02, 0xb3, 0x4e, 0x44, 0xf8,
	0xce, 0x78, 0x04, 0x10, 0x78, 0x2e, 0xbf, 0x08, 0xa5, 0x63, 0xe9, 0x31, 0x3b, 0x0c, 0x48, 0x13,
	0x80, 0xfa, 0x07, 0xcc, 0xff, 0x5b, 0x07, 0xd7, 0x1b, 0xed, 0x08, 0x9f, 0xc2, 0x48, 0x39, 0x2e,
	0xfa, 0xde, 0x9a, 0x1b, 0x6a, 0xa3, 0xc1, 0x3d, 0x06, 0xca, 0xad, 0x12, 0x82, 0x35, 0x94, 0x64,
	0xad, 0xb1, 0xe9, 0x29, 0xc7, 0xe9, 0x29, 0xcf, 0x03, 0xc6, 0x06, 0x2a, 0x88, 0xa4, 0xfa, 0x31,
	0xe5, 0x5e, 0xf4, 0x87, 0x01, 0x0a, 0xc6, 0xf5, 0x19, 0x94, 0x71, 0x00, 0x11, 0xf6, 0xa5, 0x69,
	0x29, 0xfa, 0x94, 0x2c, 0x9e, 0x71, 0x06, 0x07, 0x96, 0x84, 0x33, 0x43, 0xf0, 0x43, 0x96, 0xfe,
	0x2d, 0x3f, 0xc2, 0x74, 0xed, 0xbc, 0x32, 0xcd, 0xd5, 0xb5, 0xf3, 0x64, 0x9b, 0xd5, 0xe5, 0xb0,
	0xea, 0x78, 0x0e, 0xfb, 0xa1, 0x03, 0x1e, 0xa5, 0x2c, 0xf9, 0x55, 0x7f, 0xf8, 0xe4, 0x36, 0x7a,
	0xa8, 0xfe, 0xe9, 0x20, 0xd2, 0x67, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x33, 0xde, 0x8b,
	0x46, 0x03, 0x00, 0x00,
}
